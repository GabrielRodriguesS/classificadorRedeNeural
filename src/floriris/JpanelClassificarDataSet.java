/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package floriris;

import java.awt.FlowLayout;
import java.util.Arrays;
import javax.swing.JLabel;
import model.RedeNeural;
import org.neuroph.core.data.DataSetRow;

/**
 *
 * @author rodri
 */
public final class JpanelClassificarDataSet extends javax.swing.JFrame {

    private RedeNeural redeNeural;

    private static Double menorDiferenca = null;
    private static Integer indexNumeroMaisProximo = null;
    private Integer[][] confusionMatrix;

    public JpanelClassificarDataSet() {
        initComponents();
    }

    public JpanelClassificarDataSet(RedeNeural redeNeural) {
        initComponents();
        this.redeNeural = redeNeural;
        getConfusionMatrix();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tittle = new javax.swing.JLabel();
        trainAgainButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));

        tittle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tittle.setText("Classifique o DataSet!");

        trainAgainButton.setText("Treinar novamente");
        trainAgainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainAgainButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Selecionar outro DataSet");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 768, Short.MAX_VALUE)
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(288, Short.MAX_VALUE)
                .addComponent(tittle)
                .addGap(280, 280, 280))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(resetButton)
                        .addGap(290, 290, 290)
                        .addComponent(trainAgainButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tittle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainAgainButton)
                    .addComponent(resetButton))
                .addGap(65, 65, 65))
        );

        getAccessibleContext().setAccessibleName("lacuna");
        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainAgainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainAgainButtonActionPerformed
        JpanelTrain trainNeuralNetwork = new JpanelTrain(this.redeNeural);
        trainNeuralNetwork.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_trainAgainButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        JpanelDataSet trainNeuralNetwork = new JpanelDataSet();
        trainNeuralNetwork.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JpanelClassificarDataSet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JpanelClassificarDataSet().setVisible(true);
            }
        });
    }

    public void getConfusionMatrix() {
        generateMatriz();
        int indexOutputDesired;
        for (DataSetRow elemento : this.redeNeural.getDataSet().getRows()) {
            this.redeNeural.setInput(elemento.getInput());
            this.redeNeural.calculate();
            double[] networkOutput = this.redeNeural.getOutput();

            indexOutputDesired = getIndexOutputDesired(elemento.getDesiredOutput());
            calcOutputDestination(networkOutput, indexOutputDesired);

            System.out.println("Input" + Arrays.toString(elemento.getInput()));
            System.out.println("Output" + Arrays.toString(networkOutput) + "\n");
        }
        System.out.println("________MATRIZ___DE___CONFUSAO_________");
        somaDosTotaisDaMatrix();
        printMatriz();
    }

    public void generateMatriz() {
        int numberOfOutputs = this.redeNeural.getDataSet().getOutputSize() + 1;
        this.confusionMatrix = new Integer[numberOfOutputs][numberOfOutputs];
        for (int i = 0; i < numberOfOutputs; i++) {
            for (int j = 0; j < numberOfOutputs; j++) {
                this.confusionMatrix[i][j] = 0;
            }
        }
    }

    public int getIndexOutputDesired(double[] outputs) {
        for (int i = 0; i < outputs.length; i++) {
            if (outputs[i] == 1) {
                this.confusionMatrix[i][outputs.length]++;
                return i;
            }
        }
        return Integer.MIN_VALUE;
    }

    public void calcOutputDestination(double[] outputs, int indexOutputDesired) {
        for (int i = 0; i < outputs.length; i++) {
            paraQualClasseFoiAtribuido(outputs[i], i);
        }
        this.confusionMatrix[indexOutputDesired][indexNumeroMaisProximo]++;
        menorDiferenca = null;
        indexNumeroMaisProximo = null;
    }

    public void paraQualClasseFoiAtribuido(Double numeroComparacao, int index) {
        Double diferenca = 1.0 - numeroComparacao;
        diferenca = Math.abs(diferenca);
        if (null == menorDiferenca || diferenca < menorDiferenca) {
            indexNumeroMaisProximo = index;
            menorDiferenca = diferenca;
        }
    }

    public void somaDosTotaisDaMatrix() {
        int sizeMatrix = this.redeNeural.getDataSet().getOutputSize();
        int limiteMatrix = sizeMatrix;
        sizeMatrix++;
        int total = 0;
        for (int i = 0; i < sizeMatrix; i++) {
            for (int j = 0; j < sizeMatrix; j++) {
                total += this.confusionMatrix[j][i];
            }
            this.confusionMatrix[limiteMatrix][i] = total;
            total = 0;
        }
    }

    public void printMatriz() {
        int sizeMatrix = this.redeNeural.getDataSet().getOutputSize() + 1;
        String valuesToPrint = "<html><table ><tr><th style='padding: 15px;'></th>";

        for (int i = 0; i < sizeMatrix; i++) {
            if (i == sizeMatrix - 1) {
                valuesToPrint += "<th style='padding: 15px;background-color: #4CAF50;color: white;'><b>Total</b></th>";
            } else {
                valuesToPrint += "<th style='padding: 15px;background-color: #4CAF50;color: white;'><b>Classe " + i + "</b></th>";
            }
        }
        valuesToPrint += "</tr>";
        for (int i = 0; i < sizeMatrix; i++) {
            if (i != sizeMatrix - 1) {
                valuesToPrint += "<tr><th style='padding: 15px;'></th>";
            } else {
                valuesToPrint += "<tr style='padding: 15px;background-color: #4CAF50;color: white;'><th>Total</th>";
            }
            for (int j = 0; j < sizeMatrix; j++) {
                if (i == j) {
                    valuesToPrint += "<th style='background-color: red;padding: 15px;color: white;'>" + this.confusionMatrix[i][j] + "</th>";
                } else if (j == sizeMatrix - 1) {
                    valuesToPrint += "<th style='padding: 15px;background-color: #4CAF50;color: white;'>" + this.confusionMatrix[i][j] + "</th>";
                } else {
                    valuesToPrint += "<th>" + this.confusionMatrix[i][j] + "</th>";
                }
            }
            valuesToPrint += "</tr>";
        }

        valuesToPrint += "</table ></html>";
        System.out.println(valuesToPrint);
        JLabel labelForPrintMatrix = new JLabel(valuesToPrint);
        this.jPanel.setLayout(new FlowLayout());
        this.jPanel.add(labelForPrintMatrix);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel tittle;
    private javax.swing.JButton trainAgainButton;
    // End of variables declaration//GEN-END:variables

}
